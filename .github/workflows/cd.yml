name: CD

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  # TODO: think about reusing these jobs instead of duplicating them
  build-macos:
    name: Build wheels on macOS arm-x64

    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install vcpkg
        uses: lukka/run-vcpkg@v11.5
        with:
          vcpkgDirectory: "${{ github.workspace }}/vcpkg"

      - name: Replace vcpkg manifest
        run: |
          cp .github/macos/vcpkg.json .

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.21.1

      - name: Store wheel
        uses: actions/upload-artifact@v4
        with:
          name: "wheel-mini-face-macosx_14_0_arm64"
          path: ./wheelhouse/*.whl
          compression-level: 0

  build-linux:
    name: Build wheels on Linux ${{ matrix.architecture }}

    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - wheel_name: "wheel-mini-facel-manylinux_2_28_x86_64"
            architecture: "x86_64"
            container: ".github/containers/manylinux_x86_64.Dockerfile"
          # TODO: add linux_aarch64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          buildkitd-flags: --debug

      - name: Build Docker image
        # using build-push-action (without actually using `push`) to make use of cache arguments
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.container }}
          tags: manylinux_${{ matrix.architecture }}:latest
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          BUILDKIT_PROGRESS: plain

      - uses: actions/checkout@v4

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.21.1

      - name: Store wheel
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.wheel_name }}
          path: ./wheelhouse/*.whl
          compression-level: 0

  deploy:
    name: >-
      Publish Python package to PyPI

    needs:
      - build-macos
      - build-linux

    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/mini-face

    permissions:
      id-token: write

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install twine

      - name: Download all the wheels
        uses: actions/download-artifact@v4
        with:
          pattern: "wheel**"
          path: ./wheelhouse/
          merge-multiple: true

      - name: Publish distribution to Test PyPI
        run: |
          twine upload -r testpypi ./wheelhouse/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_KEY }}
